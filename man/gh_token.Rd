% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gh_token.R
\name{gh_token}
\alias{gh_token}
\title{Return the local user's GitHub Personal Access Token (PAT)}
\usage{
gh_token(api_url = NULL, strategy = NULL)
}
\arguments{
\item{api_url}{GitHub API URL. Defaults to the \code{GITHUB_API_URL} environment
variable, if set, and otherwise to \url{https://api.github.com}.}

\item{strategy}{Where to look for a PAT. If specified, must be a
comma-delimited string consisting of "env", "git", and/or "key". Examples:
"env", "env,git", "key,git,env". gh searches for a PAT in these places, in
this order.

By default, \code{strategy} is "env,git" if the credential package is available
and "env" if it is not.}
}
\value{
A string of 40 hexadecimal digits, if a PAT is found, or the empty
string, otherwise. For convenience, the return value has an S3 class in
order to ensure that simple printing strategies don't reveal the entire
PAT.
}
\description{
If gh can find a personal access token (PAT) via \code{gh_token()}, it includes
the PAT in its requests. Some requests succeed without a PAT, but many
require a PAT to prove the request is authorized by a specific GitHub user. A
PAT also helps with rate limiting. If your gh use is more than casual, you
want a PAT.

The PAT corresponding to \code{api_url} is searched for with a \code{strategy} that
looks in one or more of these places:
\itemize{
\item \code{"env"}: environment variable(s)
\item \code{"git"}: Git credential store (requires the credentials package)
\item \code{"key"}: OS-level keychain (requires the keyring package)
}

Details are in the \href{https://gh.r-lib.org/articles/managing-personal-access-tokens.html}{Managing Personal Access Tokens} vignette.
}
\examples{
\dontrun{
gh_token()

format(gh_token())

str(gh_token())
}
}
\seealso{
\code{\link[=slugify_url]{slugify_url()}} for computing the environment variables or keys that
gh uses to search for URL-specific PATs. \code{\link[=gh_whoami]{gh_whoami()}} to see details
about a token.
}
